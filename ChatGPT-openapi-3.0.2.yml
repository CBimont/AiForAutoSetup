#  ___ _            _ _    _ _    __
# / __(_)_ __  _ __| (_)__(_) |_ /_/
# \__ \ | '  \| '_ \ | / _| |  _/ -_)
# |___/_|_|_|_| .__/_|_\__|_|\__\___|
#             |_| Module: ChatGPT 0.1
components:
  schemas:
    Error404:
      type: object
      properties:
        error:
          description: Error message
          type: string
        status:
          description: Error status
          type: integer
          enum:
          - 404
    PublicationResult:
      type: object
      properties:
        mime:
          description: MIME type
          type: string
        content:
          description: Content (plain text or base64 encoded)
          type: string
    PlaceData:
      type: object
      properties:
        coord:
          description: Geographical coordinates
          type: string
        address:
          description: Address
          type: string
        row_id:
          description: Row ID
          type: string
        label1:
          description: 'Label #1'
          type: string
        label2:
          description: 'Label #2'
          type: string
        label3:
          description: 'Label #3'
          type: string
    PlaceMapData:
      type: object
      properties:
        places:
          description: Places
          type: array
          items:
            $ref: '#/components/schemas/PlaceData'
        name:
          description: Name
          type: string
    GptExemple:
      type: object
      properties:
        gptExPrompt:
          description: Prompt
          type: string
        gptExOldPrompt:
          description: Old answer
          type: string
        gptExName:
          description: Name
          type: string
        gptExType:
          description: You need help with
          type: string
          enum:
          - CODE
          - OTHER
        gptExSpecification:
          description: Specification
          type: string
        row_id:
          description: Unique technical row ID
          type: string
        gptExResponse:
          description: Response
          type: string
    ArrayOfGptTest:
      type: array
      items:
        $ref: '#/components/schemas/GptTest'
    ArrayOfGptExemple:
      type: array
      items:
        $ref: '#/components/schemas/GptExemple'
    ActionResult:
      type: object
      properties:
        result:
          description: Action result
          type: string
    TreeviewData:
      type: object
      properties:
        item:
          description: Object item with lists of linked objects' items
          type: object
    Error400:
      type: object
      properties:
        error:
          description: Error message
          type: string
        status:
          description: Error status
          type: integer
          enum:
          - 400
    Error401:
      type: object
      properties:
        error:
          description: Error message
          type: string
        status:
          description: Error status
          type: integer
          enum:
          - 401
    Error500:
      type: object
      properties:
        error:
          description: Error message
          type: string
        status:
          description: Error status
          type: integer
          enum:
          - 500
    GptTest:
      type: object
      properties:
        gptNotepad:
          description: test notepad
          type: string
        gptTestId:
          description: id
          type: integer
        gptTestLongString:
          description: Description
          type: string
        row_id:
          description: Unique technical row ID
          type: string
    Error403:
      type: object
      properties:
        error:
          description: Error message
          type: string
        status:
          description: Error status
          type: integer
          enum:
          - 403
  securitySchemes:
    basicAuth:
      scheme: basic
      type: http
    bearerAuth:
      bearerFormat: Simplicite token
      scheme: bearer
      type: http
servers:
- url: /api
openapi: 3.0.2
paths:
  /rest/GptExemple/{row_id}:
    post:
      summary: Create a new GptExemple business object record
      security:
      - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GptExemple'
      operationId: obj-gptexemple-create
      responses:
        '200':
          description: Success in creating a new business object record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GptExemple'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      parameters:
      - schema:
          type: string
        in: path
        name: row_id
        description: Row ID (or empty or _ for all row IDs)
        required: true
      tags:
      - GptExemple
    get:
      summary: Get a GptExemple business object record
      security:
      - bearerAuth: []
      operationId: obj-gptexemple-get
      responses:
        '200':
          description: Success in getting a single business object record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GptExemple'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
      parameters:
      - schema:
          type: string
        in: path
        name: row_id
        description: Row ID (or empty or _ for all row IDs)
        required: true
      - schema:
          type: boolean
        in: query
        name: _inline_documents
        description: Inline documents?
        required: false
      - schema:
          type: boolean
        in: query
        name: _inline_thumbnails
        description: Inline documents' thumbnails?
        required: false
      - schema:
          type: boolean
        in: query
        name: _inline_objects
        description: Inline objects?
        required: false
      tags:
      - GptExemple
    delete:
      summary: Delete a GptExemple business object record
      security:
      - bearerAuth: []
      operationId: obj-gptexemple-delete
      responses:
        '200':
          description: Success in deleting a business object record
          content:
            application/json: {}
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
      parameters:
      - schema:
          type: string
        in: path
        name: row_id
        description: Row ID (or empty or _ for all row IDs)
        required: true
      tags:
      - GptExemple
    put:
      summary: Update a GptExemple business object record
      security:
      - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GptExemple'
      operationId: obj-gptexemple-update
      responses:
        '200':
          description: Success in updating a business object record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GptExemple'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
      parameters:
      - schema:
          type: string
        in: path
        name: row_id
        description: Row ID (or empty or _ for all row IDs)
        required: true
      tags:
      - GptExemple
  /login:
    get:
      summary: Login (obtain bearer token)
      security:
      - basicAuth: []
      operationId: login
      responses:
        '200':
          description: Successful login
          content:
            application/json: {}
            text/plain: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
      parameters:
      - schema:
          type: string
          enum:
          - json
          - oauth2
          - token
        in: query
        name: _output
        description: Optional output format
        required: false
      tags:
      - session
  /logout:
    get:
      summary: Logout (revoke bearer token)
      security:
      - bearerAuth: []
      operationId: logout
      responses:
        '200':
          description: Successfull logout
          content:
            application/json: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
      tags:
      - session
  /rest/GptExemple:
    get:
      summary: Search GptExemple business object records or get contextualized metadata
      security:
      - bearerAuth: []
      operationId: obj-gptexemple-search
      responses:
        '200':
          description: Success in searching business object records (or in getting
            contextualized business object metadata, documentation, ...)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfGptExemple'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      parameters:
      - schema:
          type: boolean
        in: query
        name: _metadata
        description: Metadata?
        required: false
      - schema:
          type: boolean
        in: query
        name: _count
        description: Count?
        required: false
      - schema:
          type: boolean
        in: query
        name: _doc
        description: Documentation?
        required: false
      - schema:
          type: string
        in: query
        name: gptExPrompt
        description: Search filter for Prompt
        required: false
      - schema:
          type: string
        in: query
        name: gptExResponse
        description: Search filter for Response
        required: false
      - schema:
          type: string
          enum:
          - CODE
          - OTHER
        in: query
        name: gptExType
        description: Search filter for You need help with
        required: false
      - schema:
          type: string
        in: query
        name: gptExSpecification
        description: Search filter for Specification
        required: false
      - schema:
          type: string
        in: query
        name: gptExOldPrompt
        description: Search filter for Old answer
        required: false
      - schema:
          type: string
        in: query
        name: gptExName
        description: Search filter for Name
        required: false
      tags:
      - GptExemple
  /rest/GptTest/{row_id}:
    post:
      summary: Create a new GptTest business object record
      security:
      - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GptTest'
      operationId: obj-gpttest-create
      responses:
        '200':
          description: Success in creating a new business object record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GptTest'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      parameters:
      - schema:
          type: string
        in: path
        name: row_id
        description: Row ID (or empty or _ for all row IDs)
        required: true
      tags:
      - GptTest
    get:
      summary: Get a GptTest business object record
      security:
      - bearerAuth: []
      operationId: obj-gpttest-get
      responses:
        '200':
          description: Success in getting a single business object record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GptTest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
      parameters:
      - schema:
          type: string
        in: path
        name: row_id
        description: Row ID (or empty or _ for all row IDs)
        required: true
      - schema:
          type: boolean
        in: query
        name: _inline_documents
        description: Inline documents?
        required: false
      - schema:
          type: boolean
        in: query
        name: _inline_thumbnails
        description: Inline documents' thumbnails?
        required: false
      - schema:
          type: boolean
        in: query
        name: _inline_objects
        description: Inline objects?
        required: false
      tags:
      - GptTest
    delete:
      summary: Delete a GptTest business object record
      security:
      - bearerAuth: []
      operationId: obj-gpttest-delete
      responses:
        '200':
          description: Success in deleting a business object record
          content:
            application/json: {}
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
      parameters:
      - schema:
          type: string
        in: path
        name: row_id
        description: Row ID (or empty or _ for all row IDs)
        required: true
      tags:
      - GptTest
    put:
      summary: Update a GptTest business object record
      security:
      - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GptTest'
      operationId: obj-gpttest-update
      responses:
        '200':
          description: Success in updating a business object record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GptTest'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
      parameters:
      - schema:
          type: string
        in: path
        name: row_id
        description: Row ID (or empty or _ for all row IDs)
        required: true
      tags:
      - GptTest
  /rest/GptTest:
    get:
      summary: Search GptTest business object records or get contextualized metadata
      security:
      - bearerAuth: []
      operationId: obj-gpttest-search
      responses:
        '200':
          description: Success in searching business object records (or in getting
            contextualized business object metadata, documentation, ...)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfGptTest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500'
      parameters:
      - schema:
          type: boolean
        in: query
        name: _metadata
        description: Metadata?
        required: false
      - schema:
          type: boolean
        in: query
        name: _count
        description: Count?
        required: false
      - schema:
          type: boolean
        in: query
        name: _doc
        description: Documentation?
        required: false
      - schema:
          type: integer
        in: query
        name: gptTestId
        description: Search filter for id
        required: false
      - schema:
          type: string
        in: query
        name: gptNotepad
        description: Search filter for test notepad
        required: false
      - schema:
          type: string
        in: query
        name: gptTestLongString
        description: Search filter for Description
        required: false
      tags:
      - GptTest
  /:
    get:
      summary: Get user session information
      security:
      - bearerAuth: []
      operationId: info
      responses:
        '200':
          description: Success in getting user session information
          content:
            application/json: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
      parameters:
      - schema:
          type: boolean
        in: query
        name: texts
        description: Texts?
        required: false
      tags:
      - session
info:
  license:
    name: Simplicite license
    url: http://www.simplicitesoftware.com
  contact:
    name: Simplicite Software
    url: http://www.simplicitesoftware.com
    email: contact@simplicitesoftware.com
  description: API for module ChatGPT
  title: ChatGPT
  version: '0.1'
tags:
- name: GptExemple
  description: Exemple
- name: GptTest
  description: GptTest
